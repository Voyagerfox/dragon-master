// gradle脚本执行所需依赖
buildscript{
    repositories {
        maven{
            url "${mavneRepository}"
        }
    }
    dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springbootVersion}")
    }
}
// 插件  2.1以后版本可使用
plugins {
    id "io.spring.dependency-management" version "1.0.5.RELEASE" apply false
}
// 定义变量
ext {

    junit5Version  = "5.4.2"
    slf4jVersion   = "1.7.26"	  // spring-jcl + consistent 3rd party deps
}

// 配置所有工程（可选择）
configure(allprojects){projects->
    group = "com.china.dragon"
    version = qualifyVersionIfNecessary(version)

    // 插件（older版本语法）
    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement{
        //定义依赖解析的策略。 例如，强制某些依赖项版本，替换，冲突解决方案或快照超时
        resolutionStrategy {
            cacheChangingModulesFor 0, "seconds"
        }
        applyMavenExclusions = false
        generatedPomCustomization {
            enabled = false
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springbootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"

        }
    }
    configurations.all {
        // 检查每个构建的更新， 每隔0S检查远程依赖是否存在更新
        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
        // 解决版本冲突
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == "org.slf4j") {
                details.useVersion slf4jVersion
            }
        }
    }
    compileJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
    }
    compileTestJava {
        sourceCompatibility = 1.8  // can be switched to 11 for testing
        targetCompatibility = 1.8
        options.encoding = "UTF-8"
        options.compilerArgs += "-parameters"
    }
    repositories {
        maven {url "${mavneRepository}"}
        mavenCentral()
    }
    dependencies {
        implementation  "org.springframework.cloud:spring-cloud-starter-config"
        testImplementation "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"
    }
    // javadoc
    ext.javadocLinks = [
            "https://docs.oracle.com/javase/8/docs/api/",
            "https://docs.oracle.com/javaee/7/api/",
            "https://docs.oracle.com/cd/E13222_01/wls/docs90/javadocs/",  // CommonJ
            "https://www.ibm.com/support/knowledgecenter/SS7JFU_8.5.5/com.ibm.websphere.javadoc.doc/web/apidocs/",
            "https://glassfish.java.net/nonav/docs/v3/api/",
            "https://docs.jboss.org/jbossas/javadoc/4.0.5/connector/",
            "https://docs.jboss.org/jbossas/javadoc/7.1.2.Final/",
            "https://tiles.apache.org/tiles-request/apidocs/",
            "https://tiles.apache.org/framework/apidocs/",
            "https://www.eclipse.org/aspectj/doc/released/aspectj5rt-api/",
            "https://www.ehcache.org/apidocs/2.10.4",
            "https://www.quartz-scheduler.org/api/2.3.0/",
            "https://fasterxml.github.io/jackson-core/javadoc/2.9/",
            "https://fasterxml.github.io/jackson-databind/javadoc/2.9/",
            "https://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.9/",
            "https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/",
            "https://junit.org/junit4/javadoc/4.12/",
            "https://junit.org/junit5/docs/${junit5Version}/api/"
    ] as String[]
}

/**
 * 定义版本号
 * @param version
 * @return
 */
def qualifyVersionIfNecessary(version) {
    if (rootProject.hasProperty("BRANCH_NAME")) {
        def qualifier = rootProject.getProperty("BRANCH_NAME")
        if (qualifier.startsWith("Dragon-")) {
            return version.replace("BUILD", qualifier)
        }
    }
    return version
}
